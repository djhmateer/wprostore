// this whole file is the Schema
// contains models eg Product

generator client {
  provider        = "prisma-client-js"
  // so can use the prisma adapter for neon
  // which will allow websockets
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// eg Polo Sporting Stretch Shirt
model Product {
  // @id means this is the primary key
  // @default(dbgenerated("")) means this is a db generated UUID with a type of db UUID
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  // Each model must have 1 unique field
  // index on the db
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  // DM - I prefer to use Int and cents for prices
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?

  // Timestamp(6) includes milliseconds
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  // optional eg no password for magic link 
  password      String?
  // user or admin
  role          String    @default("user")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  // notice the Json type
  address       Json?     @db.Json
  // paypal, stripe, COD
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  // add account field here so the 1 to many relationship is created
  // ie 1 user can have many accounts eg Email, Google
  account       Account[]
  // 1 user can have many sessions eg multiple devices
  session       Session[]
}

// eg Google OAuth, Email 
model Account {
  // the FK back to the User model
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user field is mapped to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  // a composite unique primary key
  // eg Google, then an id from Google.
  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

// eg session token
model Session {
  // the PK
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

// what no relation to User??
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  // a composite unique primary key
  @@id([identifier, token])
}